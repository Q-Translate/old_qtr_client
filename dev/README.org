
#+OPTIONS:  num:nil toc:t ^:nil f:nil TeX:nil LaTeX:nil
#+STYLE: <link href="css/org.css" rel="stylesheet" type="text/css"/>

Development Tools, Tips and Tricks

* Install sshd

  We want to start a sshd server on port 2201 inside the container,
  but when we created the container with =docker run= we did not think
  about forwarding this port. We have to destroy this container and
  create a new one, with an addition =-p= option for the
  port 2201. But first we should use the command =docker commit= to
  save to a new image any configurations and data that we already have
  in this container.
  #+BEGIN_EXAMPLE
  docker stop qcl
  docker commit qcl qtr_client:1
  docker images
  docker rm qcl
  docker run -d --name=qcl --hostname=example.org \
	     -p 80:80 -p 443:443 -p 2201:2201 qtr_client:1
  #+END_EXAMPLE

  Now we can enter the container and start the sshd server:
  #+BEGIN_EXAMPLE
  docker-enter qcl
  cd /usr/local/src/qtr_client/
  dev/install-sshd.sh 2201
  #+END_EXAMPLE


* Making clones of the application

  Clones of the main site can be used for development and testing. 

  Inside the container you can make a clone for development like this:
  #+BEGIN_EXAMPLE
  docker-enter qcl
  cd /usr/local/src/qtr_client/
  dev/clone.sh qcl qcl_dev1
  dev/clone.sh qcl_dev1 qcl_test1
  #+END_EXAMPLE

  It creates a new application with root */var/www/qcl_dev1/* and with
  DB named *qcl_dev1*. It also creates the drush alias *@qcl_dev1*,
  and modifies the configuration of the webserver so that the cloned
  application can be accessed at *dev1.example.org*.

  *Caution:* The root directory and the DB of the clone will be
  erased, if they exist.

  Other clones like this can be created for testing etc. To cleanup
  (remove/erase) a clone, you can use *clone_rm.sh* like this:
  #+BEGIN_EXAMPLE
  docker-enter qcl
  cd /usr/local/src/qtr_client/
  dev/clone_rm.sh qcl_dev1
  dev/clone_rm.sh qcl_test1
  #+END_EXAMPLE

  By the way, you can also modify a little bit the configuration of a
  development copy of the application (in order to help us not confuse
  a development copy with a live or testing one), with the script
  =dev/config.php=:
  #+BEGIN_EXAMPLE
  docker-enter qcl
  cd /usr/local/src/qtr_client/
  drush @qcl_dev php-script dev/config.php dev2
  #+END_EXAMPLE

  It will set site_name to 'Q-Translate (dev1)', will make site email
  something like 'user+dev1@gmail.com', will enable email re-routing,
  display the /devel/ menu on the footer region, etc. Sometimes it may
  be useful.


* Making a backup of the application

  Sometimes, when testing things on Drupal (installing/uninstalling
  modules etc.) things get messy and it is not possible anymore to
  revert to the state that you were before starting the test. In this
  case the only way to get safely to a previous stable state is by
  restoring a backup (or installing from the scratch and repeating all
  the configurations).

  A snapshot of the application is just like a full backup with a time
  stamp. It saves the state of the application at a certain time, both
  the code (the whole Drupal directory) and the database. It can be
  done like this:
  #+BEGIN_EXAMPLE
  docker-enter qcl
  cd /usr/local/src/qtr_client/
  dev/snapshot.sh make @qcl
  dev/snapshot.sh make @qcl_dev
  #+END_EXAMPLE
  These will create the files ~snapshot-qcl-20140914.tgz~ and
  ~snapshot-qcl_dev-20140914.tgz~. They can be restored like this:
  #+BEGIN_EXAMPLE
  dev/snapshot.sh restore @qcl --file=snapshot-qcl-20140914.tgz
  dev/snapshot.sh restore @qcl --file=snapshot-qcl_dev-20140914.tgz
  dev/snapshot.sh restore @qcl_dev --file=snapshot-qcl-20140914.tgz
  dev/snapshot.sh restore @qcl_dev --file=snapshot-qcl_dev-20140914.tgz
  #+END_EXAMPLE
  As you may notice, a snapshot of *@qcl_dev* can also be restored on the
  main application, and the other way around.

  However, in many cases a backup/restore of the database is all that
  is needed, and it is more efficient. It can be done with *drush
  sql-dump* and *drush sql-query* like this:
  #+BEGIN_EXAMPLE
  drush sql-dump @qcl > qcl.sql
  drush sql-dump @qcl_dev > qcl_dev.sql

  drush @qcl sql-query --file=$(pwd)/qcl.sql
  drush @qcl sql-query --file=$(pwd)/qcl_dev.sql

  drush @qcl_dev sql-query --file=$(pwd)/qcl.sql
  drush @qcl_dev sql-query --file=$(pwd)/qcl_dev.sql
  #+END_EXAMPLE


* Accessing the code of the application from outside container

  In general it is not possible to directly access the directories and
  files of of a container from the host system.  However we can use
  the docker /volumes/ to share directories between the container and
  the host. It can be done like this:

  + First we make a backup of the directory inside the container that
    we want to share:
    #+BEGIN_EXAMPLE
    docker-enter qcl
    cd /var/www/qcl_dev/profiles/
    cp -a qtr_client/ qtr_client-bak
    exit
    #+END_EXAMPLE

  + Then we save the image of the container as =qtr_client:dev=, in order
    to start a new container based on it:
    #+BEGIN_EXAMPLE
    docker stop qcl
    docker commit qcl qtr_client:dev
    docker images
    #+END_EXAMPLE

  + Next we create a new container that shares a directory with the
    host system (using the option =-v=):
    #+BEGIN_EXAMPLE
    docker run -d --name=qcl_dev --hostname=dev.example.org \
	       -v $(pwd)/qcl_dev:/var/www/qcl_dev/profiles/qtr_client/
	       -p 80:80 -p 443:443 qtr_client:dev
    #+END_EXAMPLE
    *Note:* The container *qcl* must be stoped before we create and
    start the new container *qcl_dev*, otherwise the ports 80 and 443
    will conflict.

  + Finally we enter the container and move the content of the backup
    directory to the shared directory:
    #+BEGIN_EXAMPLE
    docker-enter qcl_dev
    cd /var/www/qcl_dev/profiles/qtr_client/
    cp -a ../qtr_client-bak/* .
    cp -a ../qtr_client-bak/.* .
    rm -rf ../qtr_client-bak/
    exit
    #+END_EXAMPLE

  Now we can go to the directory *qcl_dev/* and start /emacs/ or any
  other tools. This way we don't have to install /emacs/ or any other
  development tools inside the container and we can use the best of
  development tools that the host system can offer.


* Pushing commits

  The copy of the application on =/var/www/qcl_dev/profiles/qtr_client/=
  (as well as the one on =/var/www/qcl/profiles/qtr_client/=) are actually
  clones of the git repository of the project on GitHub, so we can
  *pull* from it and *push* to it. Pulling (to get up-to-date) can be
  done by everybody, however pushing requires a username and password
  (the ones that are used to access the account at GitHub).


* The commit workflow

  For small or straight-forward changes you can also work directly on
  the *master* branch, then *commit*, and then *push* to github.

  However I usually use a bit more complicated workflow. First I
  create and checkout a *dev* branch. When the work is done I merge
  this branch to *master* and then delete it. Finally *push* the
  commit(s) to github.
  #+BEGIN_EXAMPLE
  git checkout -d dev     ### create a branch and switch to it
  [work...commit...work...comit]
  git checkout master     ### switch back to master
  git pull                ### get any latest commits from github
  git merge dev [--squash]
  git push                ### send commits to github
  git branch -D dev       ### erase the branch
  #+END_EXAMPLE

  Usually there are no commits comming from github, since I am the
  only developper (unless I have worked and commited from some other
  location). So, when I merge without *--squash* this usually results
  in *fast-forward* merge, which means that all the commits that I
  have done on the branch *dev* are automatically transferred to the
  branch *master*.

  However sometimes there may be /dirty commits/ on the *dev* branch,
  which means that there may be incomplete commits, or commits that
  reverse what was done on the previous commits etc. When I wish to
  reorganize commits and make them cleaner, I use the *--squash*
  option, which collects all the changes on the *dev* branch and
  leaves them on the *master* sandbox as local modifications
  (uncommitted). Then I can redo the commits on a cleaner or more
  logical way. Afterwards the *dev* branch will be deleted and the old
  commits will be lost.
  

* Working with a dev-test-live workflow

  At some point, all the modifications on the local copy of the
  application (sandbox) have to be transferred to a public server,
  where the application is in "production", performing "live". On that
  public server there is the same docker container as in the
  development server. The synchronization of the application can be
  done via git push and pull.

  However *drush rsync* and *drush sql-sync* offer another option for
  synchronization. For more details see:
  #+BEGIN_EXAMPLE
  drush help rsync
  drush help sql-sync
  drush topic docs-aliases
  #+END_EXAMPLE

  These commands use drush *aliases*, which allow also remote
  execution of drush commands. On my development environment I have
  created the file ~/etc/drush/remote.aliases.drushrc.php~, which has
  a content like this:
  #+BEGIN_EXAMPLE
  <?php

  $aliases['live'] = array (
    'root' => '/var/www/qcl',
    'uri' => 'http://example.org',

    'remote-host' => 'example.org',
    'remote-user' => 'root',
    'ssh-options' => '-p 2201 -i /root/.ssh/id_rsa',

    'path-aliases' => array (
      '%profile' => 'profiles/qtr_client',
      '%downloads' => '/var/www/downloads',
    ),

    'command-specific' => array (
      'sql-sync' => array (
	'simulate' => '1',
      ),
      'rsync' => array (
	'simulate' => '1',
      ),
    ),
  );

  $aliases['test'] = array (
    'parent' => '@live',
    'root' => '/var/www/qcl',
    'uri' => 'http://test.example.org',
    'remote-host' => 'test.example.org',

    'command-specific' => array (
      'sql-sync' => array (
	'simulate' => '0',
      ),
      'rsync' => array (
	'simulate' => '0',
      ),
    ),
  );
  #+END_EXAMPLE

  It defines the aliases *live* and *test*. The test/stage application
  is almost identical to the live/production one, however it is not
  for public use. The idea is to test there first any updates/upgrades
  of the application, in order to make sure that they don't break any
  things, before applying them to the real live application. In my
  case it is placed on a different server, however it can also be
  placed on the same server as the live application (just make a clone
  of the main application with =dev/clone.sh qcl qcl_test=).

  When everything is set up correctly, the synchronization can be done
  as simply as this:
  #+BEGIN_EXAMPLE
  drush rsync @live @test
  drush sql-sync @live @test
  drush rsync @live @qcl_dev
  drush sql-sync @live @qcl_dev
  #+END_EXAMPLE

  *Note:* Synchronizing this way from *@test* to *@live* or from
  *@qcl_dev* to *@live*, usually is a HUGE mistake, but the /simulate/
  option on the config file will make sure that it fails.

  For drush commands to work remotely, *ssh* daemon has to be running
  on the remote server, inside the docker container. By default it is
  not installed, but it can be installed with the script
  *dev/install-sshd.sh*. This script will also take care to change the
  ssh port to *2201*, in order to avoid any conflicts with any
  existing daemon on the host environment, and also for increased
  security.

  For remote access to work correctly, the public/private key ssh
  access should be set up and configured as well. For more detailed
  instructions on how to do it see:
  http://dashohoxha.fs.al/how-to-secure-ubuntu-server/
